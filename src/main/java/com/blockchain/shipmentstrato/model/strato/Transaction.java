/*
 * STRATO API
 * This Swagger interactive documentation makes STRATO API calls to OAuth-protected STRATO demo node. Click 'Authorize' to sign-in with the test account.
 *
 * OpenAPI spec version: 4.5.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.blockchain.shipmentstrato.model.strato;

import java.util.Objects;
import com.blockchain.shipmentstrato.model.strato.TransactionType;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.File;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * A transaction
 */
@Schema(description = "A transaction")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-01-07T11:36:15.752447+08:00[Asia/Shanghai]")public class Transaction {

  @JsonProperty("transactionType")

  private TransactionType transactionType = null;

  @JsonProperty("hash")

  private String hash = null;

  @JsonProperty("gasLimit")

  private Integer gasLimit = null;

  @JsonProperty("codeOrData")

  private String codeOrData = null;

  @JsonProperty("gasPrice")

  private Integer gasPrice = null;

  @JsonProperty("to")

  private String to = null;

  @JsonProperty("from")

  private String from = null;

  @JsonProperty("value")

  private Integer value = null;

  @JsonProperty("fromBlock")

  private Boolean fromBlock = null;

  @JsonProperty("blockNumber")

  private Integer blockNumber = null;

  @JsonProperty("r")

  private String r = null;

  @JsonProperty("s")

  private String s = null;

  @JsonProperty("v")

  private File v = null;

  @JsonProperty("metadata")

  private Map<String, String> metadata = null;

  @JsonProperty("timestamp")

  private String timestamp = null;

  @JsonProperty("nonce")

  private Integer nonce = null;

  @JsonProperty("origin")

  private String origin = null;

  @JsonProperty("chainId")

  private String chainId = null;
  public Transaction transactionType(TransactionType transactionType) {
    this.transactionType = transactionType;
    return this;
  }

  

  /**
  * Get transactionType
  * @return transactionType
  **/
  @Schema(required = true, description = "")
  public TransactionType getTransactionType() {
    return transactionType;
  }
  public void setTransactionType(TransactionType transactionType) {
    this.transactionType = transactionType;
  }
  public Transaction hash(String hash) {
    this.hash = hash;
    return this;
  }

  

  /**
  * Get hash
  * @return hash
  **/
  @Schema(required = true, description = "")
  public String getHash() {
    return hash;
  }
  public void setHash(String hash) {
    this.hash = hash;
  }
  public Transaction gasLimit(Integer gasLimit) {
    this.gasLimit = gasLimit;
    return this;
  }

  

  /**
  * Get gasLimit
  * minimum: 0
  * @return gasLimit
  **/
  @Schema(required = true, description = "")
  public Integer getGasLimit() {
    return gasLimit;
  }
  public void setGasLimit(Integer gasLimit) {
    this.gasLimit = gasLimit;
  }
  public Transaction codeOrData(String codeOrData) {
    this.codeOrData = codeOrData;
    return this;
  }

  

  /**
  * Get codeOrData
  * @return codeOrData
  **/
  @Schema(description = "")
  public String getCodeOrData() {
    return codeOrData;
  }
  public void setCodeOrData(String codeOrData) {
    this.codeOrData = codeOrData;
  }
  public Transaction gasPrice(Integer gasPrice) {
    this.gasPrice = gasPrice;
    return this;
  }

  

  /**
  * Get gasPrice
  * minimum: 0
  * @return gasPrice
  **/
  @Schema(required = true, description = "")
  public Integer getGasPrice() {
    return gasPrice;
  }
  public void setGasPrice(Integer gasPrice) {
    this.gasPrice = gasPrice;
  }
  public Transaction to(String to) {
    this.to = to;
    return this;
  }

  

  /**
  * Get to
  * @return to
  **/
  @Schema(description = "")
  public String getTo() {
    return to;
  }
  public void setTo(String to) {
    this.to = to;
  }
  public Transaction from(String from) {
    this.from = from;
    return this;
  }

  

  /**
  * Get from
  * @return from
  **/
  @Schema(required = true, description = "")
  public String getFrom() {
    return from;
  }
  public void setFrom(String from) {
    this.from = from;
  }
  public Transaction value(Integer value) {
    this.value = value;
    return this;
  }

  

  /**
  * Get value
  * minimum: 0
  * @return value
  **/
  @Schema(required = true, description = "")
  public Integer getValue() {
    return value;
  }
  public void setValue(Integer value) {
    this.value = value;
  }
  public Transaction fromBlock(Boolean fromBlock) {
    this.fromBlock = fromBlock;
    return this;
  }

  

  /**
  * Get fromBlock
  * @return fromBlock
  **/
  @Schema(description = "")
  public Boolean isFromBlock() {
    return fromBlock;
  }
  public void setFromBlock(Boolean fromBlock) {
    this.fromBlock = fromBlock;
  }
  public Transaction blockNumber(Integer blockNumber) {
    this.blockNumber = blockNumber;
    return this;
  }

  

  /**
  * Get blockNumber
  * minimum: 9223372036854775616
  * maximum: -9223372036854775616
  * @return blockNumber
  **/
  @Schema(description = "")
  public Integer getBlockNumber() {
    return blockNumber;
  }
  public void setBlockNumber(Integer blockNumber) {
    this.blockNumber = blockNumber;
  }
  public Transaction r(String r) {
    this.r = r;
    return this;
  }

  

  /**
  * Get r
  * @return r
  **/
  @Schema(required = true, description = "")
  public String getR() {
    return r;
  }
  public void setR(String r) {
    this.r = r;
  }
  public Transaction s(String s) {
    this.s = s;
    return this;
  }

  

  /**
  * Get s
  * @return s
  **/
  @Schema(required = true, description = "")
  public String getS() {
    return s;
  }
  public void setS(String s) {
    this.s = s;
  }
  public Transaction v(File v) {
    this.v = v;
    return this;
  }

  

  /**
  * Get v
  * @return v
  **/
  @Schema(required = true, description = "")
  public File getV() {
    return v;
  }
  public void setV(File v) {
    this.v = v;
  }
  public Transaction metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  
  public Transaction putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }
  /**
  * Get metadata
  * @return metadata
  **/
  @Schema(description = "")
  public Map<String, String> getMetadata() {
    return metadata;
  }
  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }
  public Transaction timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  

  /**
  * Get timestamp
  * @return timestamp
  **/
  @Schema(description = "")
  public String getTimestamp() {
    return timestamp;
  }
  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }
  public Transaction nonce(Integer nonce) {
    this.nonce = nonce;
    return this;
  }

  

  /**
  * Get nonce
  * minimum: 0
  * @return nonce
  **/
  @Schema(required = true, description = "")
  public Integer getNonce() {
    return nonce;
  }
  public void setNonce(Integer nonce) {
    this.nonce = nonce;
  }
  public Transaction origin(String origin) {
    this.origin = origin;
    return this;
  }

  

  /**
  * Get origin
  * @return origin
  **/
  @Schema(required = true, description = "")
  public String getOrigin() {
    return origin;
  }
  public void setOrigin(String origin) {
    this.origin = origin;
  }
  public Transaction chainId(String chainId) {
    this.chainId = chainId;
    return this;
  }

  

  /**
  * Get chainId
  * @return chainId
  **/
  @Schema(description = "")
  public String getChainId() {
    return chainId;
  }
  public void setChainId(String chainId) {
    this.chainId = chainId;
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transaction transaction = (Transaction) o;
    return Objects.equals(this.transactionType, transaction.transactionType) &&
        Objects.equals(this.hash, transaction.hash) &&
        Objects.equals(this.gasLimit, transaction.gasLimit) &&
        Objects.equals(this.codeOrData, transaction.codeOrData) &&
        Objects.equals(this.gasPrice, transaction.gasPrice) &&
        Objects.equals(this.to, transaction.to) &&
        Objects.equals(this.from, transaction.from) &&
        Objects.equals(this.value, transaction.value) &&
        Objects.equals(this.fromBlock, transaction.fromBlock) &&
        Objects.equals(this.blockNumber, transaction.blockNumber) &&
        Objects.equals(this.r, transaction.r) &&
        Objects.equals(this.s, transaction.s) &&
        Objects.equals(this.v, transaction.v) &&
        Objects.equals(this.metadata, transaction.metadata) &&
        Objects.equals(this.timestamp, transaction.timestamp) &&
        Objects.equals(this.nonce, transaction.nonce) &&
        Objects.equals(this.origin, transaction.origin) &&
        Objects.equals(this.chainId, transaction.chainId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionType, hash, gasLimit, codeOrData, gasPrice, to, from, value, fromBlock, blockNumber, r, s, v, metadata, timestamp, nonce, origin, chainId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transaction {\n");
    
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("    gasLimit: ").append(toIndentedString(gasLimit)).append("\n");
    sb.append("    codeOrData: ").append(toIndentedString(codeOrData)).append("\n");
    sb.append("    gasPrice: ").append(toIndentedString(gasPrice)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    fromBlock: ").append(toIndentedString(fromBlock)).append("\n");
    sb.append("    blockNumber: ").append(toIndentedString(blockNumber)).append("\n");
    sb.append("    r: ").append(toIndentedString(r)).append("\n");
    sb.append("    s: ").append(toIndentedString(s)).append("\n");
    sb.append("    v: ").append(toIndentedString(v)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    chainId: ").append(toIndentedString(chainId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
