/*
 * STRATO API
 * This Swagger interactive documentation makes STRATO API calls to OAuth-protected STRATO demo node. Click 'Authorize' to sign-in with the test account.
 *
 * OpenAPI spec version: 4.5.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.blockchain.shipmentstrato.model.strato;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.File;

/**
 * Body
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-01-07T11:36:15.752447+08:00[Asia/Shanghai]")public class Body {

  @JsonProperty("content")

  private File content = null;

  @JsonProperty("username")

  private String username = null;

  @JsonProperty("password")

  private String password = null;

  @JsonProperty("address")

  private String address = null;

  @JsonProperty("provider")

  private String provider = "s3";

  @JsonProperty("metadata")

  private String metadata = null;
  public Body content(File content) {
    this.content = content;
    return this;
  }

  

  /**
  * The file to be uploaded
  * @return content
  **/
  @Schema(required = true, description = "The file to be uploaded")
  public File getContent() {
    return content;
  }
  public void setContent(File content) {
    this.content = content;
  }
  public Body username(String username) {
    this.username = username;
    return this;
  }

  

  /**
  * The user uploading the file
  * @return username
  **/
  @Schema(required = true, description = "The user uploading the file")
  public String getUsername() {
    return username;
  }
  public void setUsername(String username) {
    this.username = username;
  }
  public Body password(String password) {
    this.password = password;
    return this;
  }

  

  /**
  * The password of the user uploading the file
  * @return password
  **/
  @Schema(required = true, description = "The password of the user uploading the file")
  public String getPassword() {
    return password;
  }
  public void setPassword(String password) {
    this.password = password;
  }
  public Body address(String address) {
    this.address = address;
    return this;
  }

  

  /**
  * Address of the user uploading the file
  * @return address
  **/
  @Schema(required = true, description = "Address of the user uploading the file")
  public String getAddress() {
    return address;
  }
  public void setAddress(String address) {
    this.address = address;
  }
  public Body provider(String provider) {
    this.provider = provider;
    return this;
  }

  

  /**
  * Get provider
  * @return provider
  **/
  @Schema(required = true, description = "")
  public String getProvider() {
    return provider;
  }
  public void setProvider(String provider) {
    this.provider = provider;
  }
  public Body metadata(String metadata) {
    this.metadata = metadata;
    return this;
  }

  

  /**
  * Description of the file
  * @return metadata
  **/
  @Schema(required = true, description = "Description of the file")
  public String getMetadata() {
    return metadata;
  }
  public void setMetadata(String metadata) {
    this.metadata = metadata;
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Body body = (Body) o;
    return Objects.equals(this.content, body.content) &&
        Objects.equals(this.username, body.username) &&
        Objects.equals(this.password, body.password) &&
        Objects.equals(this.address, body.address) &&
        Objects.equals(this.provider, body.provider) &&
        Objects.equals(this.metadata, body.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, username, password, address, provider, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Body {\n");
    
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
