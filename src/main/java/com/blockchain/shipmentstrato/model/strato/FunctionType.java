/*
 * STRATO API
 * This Swagger interactive documentation makes STRATO API calls to OAuth-protected STRATO demo node. Click 'Authorize' to sign-in with the test account.
 *
 * OpenAPI spec version: 4.5.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.blockchain.shipmentstrato.model.strato;

import java.util.Objects;
import com.blockchain.shipmentstrato.model.strato.SolidityType;
import com.blockchain.shipmentstrato.model.strato.StateMutability;
import com.blockchain.shipmentstrato.model.strato.VisibilityOfAFunction;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Xabi Function Type
 */
@Schema(description = "Xabi Function Type")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-01-07T11:36:15.752447+08:00[Asia/Shanghai]")public class FunctionType {

  @JsonProperty("args")

  private Map<String, SolidityType> args = new HashMap<>();

  @JsonProperty("vals")

  private Map<String, SolidityType> vals = new HashMap<>();

  @JsonProperty("stateMutability")

  private StateMutability stateMutability = null;

  @JsonProperty("contents")

  private String contents = null;

  @JsonProperty("visibility")

  private VisibilityOfAFunction visibility = null;

  @JsonProperty("modifiers")

  private List<String> modifiers = null;
  public FunctionType args(Map<String, SolidityType> args) {
    this.args = args;
    return this;
  }

  
  public FunctionType putArgsItem(String key, SolidityType argsItem) {
    this.args.put(key, argsItem);
    return this;
  }
  /**
  * Get args
  * @return args
  **/
  @Schema(required = true, description = "")
  public Map<String, SolidityType> getArgs() {
    return args;
  }
  public void setArgs(Map<String, SolidityType> args) {
    this.args = args;
  }
  public FunctionType vals(Map<String, SolidityType> vals) {
    this.vals = vals;
    return this;
  }

  
  public FunctionType putValsItem(String key, SolidityType valsItem) {
    this.vals.put(key, valsItem);
    return this;
  }
  /**
  * Get vals
  * @return vals
  **/
  @Schema(required = true, description = "")
  public Map<String, SolidityType> getVals() {
    return vals;
  }
  public void setVals(Map<String, SolidityType> vals) {
    this.vals = vals;
  }
  public FunctionType stateMutability(StateMutability stateMutability) {
    this.stateMutability = stateMutability;
    return this;
  }

  

  /**
  * Get stateMutability
  * @return stateMutability
  **/
  @Schema(description = "")
  public StateMutability getStateMutability() {
    return stateMutability;
  }
  public void setStateMutability(StateMutability stateMutability) {
    this.stateMutability = stateMutability;
  }
  public FunctionType contents(String contents) {
    this.contents = contents;
    return this;
  }

  

  /**
  * Get contents
  * @return contents
  **/
  @Schema(description = "")
  public String getContents() {
    return contents;
  }
  public void setContents(String contents) {
    this.contents = contents;
  }
  public FunctionType visibility(VisibilityOfAFunction visibility) {
    this.visibility = visibility;
    return this;
  }

  

  /**
  * Get visibility
  * @return visibility
  **/
  @Schema(description = "")
  public VisibilityOfAFunction getVisibility() {
    return visibility;
  }
  public void setVisibility(VisibilityOfAFunction visibility) {
    this.visibility = visibility;
  }
  public FunctionType modifiers(List<String> modifiers) {
    this.modifiers = modifiers;
    return this;
  }

  public FunctionType addModifiersItem(String modifiersItem) {
    if (this.modifiers == null) {
      this.modifiers = new ArrayList<>();
    }
    this.modifiers.add(modifiersItem);
    return this;
  }

  /**
  * Get modifiers
  * @return modifiers
  **/
  @Schema(description = "")
  public List<String> getModifiers() {
    return modifiers;
  }
  public void setModifiers(List<String> modifiers) {
    this.modifiers = modifiers;
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FunctionType functionType = (FunctionType) o;
    return Objects.equals(this.args, functionType.args) &&
        Objects.equals(this.vals, functionType.vals) &&
        Objects.equals(this.stateMutability, functionType.stateMutability) &&
        Objects.equals(this.contents, functionType.contents) &&
        Objects.equals(this.visibility, functionType.visibility) &&
        Objects.equals(this.modifiers, functionType.modifiers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(args, vals, stateMutability, contents, visibility, modifiers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FunctionType {\n");
    
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    vals: ").append(toIndentedString(vals)).append("\n");
    sb.append("    stateMutability: ").append(toIndentedString(stateMutability)).append("\n");
    sb.append("    contents: ").append(toIndentedString(contents)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    modifiers: ").append(toIndentedString(modifiers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
