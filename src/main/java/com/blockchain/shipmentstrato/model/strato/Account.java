/*
 * STRATO API
 * This Swagger interactive documentation makes STRATO API calls to OAuth-protected STRATO demo node. Click 'Authorize' to sign-in with the test account.
 *
 * OpenAPI spec version: 4.5.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.blockchain.shipmentstrato.model.strato;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * An account
 */
@Schema(description = "An account")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-01-07T11:36:15.752447+08:00[Asia/Shanghai]")public class Account {

  @JsonProperty("address")

  private String address = null;

  @JsonProperty("nonce")

  private Integer nonce = null;

  @JsonProperty("kind")

  private String kind = null;

  @JsonProperty("balance")

  private Integer balance = null;

  @JsonProperty("contractRoot")

  private String contractRoot = null;

  @JsonProperty("code")

  private String code = null;

  @JsonProperty("codeHash")

  private String codeHash = null;

  @JsonProperty("chainId")

  private String chainId = null;

  @JsonProperty("latestBlockNum")

  private Integer latestBlockNum = null;
  public Account address(String address) {
    this.address = address;
    return this;
  }

  

  /**
  * Get address
  * @return address
  **/
  @Schema(required = true, description = "")
  public String getAddress() {
    return address;
  }
  public void setAddress(String address) {
    this.address = address;
  }
  public Account nonce(Integer nonce) {
    this.nonce = nonce;
    return this;
  }

  

  /**
  * Get nonce
  * @return nonce
  **/
  @Schema(required = true, description = "")
  public Integer getNonce() {
    return nonce;
  }
  public void setNonce(Integer nonce) {
    this.nonce = nonce;
  }
  public Account kind(String kind) {
    this.kind = kind;
    return this;
  }

  

  /**
  * Get kind
  * @return kind
  **/
  @Schema(required = true, description = "")
  public String getKind() {
    return kind;
  }
  public void setKind(String kind) {
    this.kind = kind;
  }
  public Account balance(Integer balance) {
    this.balance = balance;
    return this;
  }

  

  /**
  * Get balance
  * minimum: 0
  * @return balance
  **/
  @Schema(required = true, description = "")
  public Integer getBalance() {
    return balance;
  }
  public void setBalance(Integer balance) {
    this.balance = balance;
  }
  public Account contractRoot(String contractRoot) {
    this.contractRoot = contractRoot;
    return this;
  }

  

  /**
  * Get contractRoot
  * @return contractRoot
  **/
  @Schema(required = true, description = "")
  public String getContractRoot() {
    return contractRoot;
  }
  public void setContractRoot(String contractRoot) {
    this.contractRoot = contractRoot;
  }
  public Account code(String code) {
    this.code = code;
    return this;
  }

  

  /**
  * Get code
  * @return code
  **/
  @Schema(required = true, description = "")
  public String getCode() {
    return code;
  }
  public void setCode(String code) {
    this.code = code;
  }
  public Account codeHash(String codeHash) {
    this.codeHash = codeHash;
    return this;
  }

  

  /**
  * Get codeHash
  * @return codeHash
  **/
  @Schema(required = true, description = "")
  public String getCodeHash() {
    return codeHash;
  }
  public void setCodeHash(String codeHash) {
    this.codeHash = codeHash;
  }
  public Account chainId(String chainId) {
    this.chainId = chainId;
    return this;
  }

  

  /**
  * Get chainId
  * @return chainId
  **/
  @Schema(description = "")
  public String getChainId() {
    return chainId;
  }
  public void setChainId(String chainId) {
    this.chainId = chainId;
  }
  public Account latestBlockNum(Integer latestBlockNum) {
    this.latestBlockNum = latestBlockNum;
    return this;
  }

  

  /**
  * Get latestBlockNum
  * minimum: 0
  * @return latestBlockNum
  **/
  @Schema(required = true, description = "")
  public Integer getLatestBlockNum() {
    return latestBlockNum;
  }
  public void setLatestBlockNum(Integer latestBlockNum) {
    this.latestBlockNum = latestBlockNum;
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.address, account.address) &&
        Objects.equals(this.nonce, account.nonce) &&
        Objects.equals(this.kind, account.kind) &&
        Objects.equals(this.balance, account.balance) &&
        Objects.equals(this.contractRoot, account.contractRoot) &&
        Objects.equals(this.code, account.code) &&
        Objects.equals(this.codeHash, account.codeHash) &&
        Objects.equals(this.chainId, account.chainId) &&
        Objects.equals(this.latestBlockNum, account.latestBlockNum);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, nonce, kind, balance, contractRoot, code, codeHash, chainId, latestBlockNum);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    contractRoot: ").append(toIndentedString(contractRoot)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    codeHash: ").append(toIndentedString(codeHash)).append("\n");
    sb.append("    chainId: ").append(toIndentedString(chainId)).append("\n");
    sb.append("    latestBlockNum: ").append(toIndentedString(latestBlockNum)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
