/*
 * STRATO API
 * This Swagger interactive documentation makes STRATO API calls to OAuth-protected STRATO demo node. Click 'Authorize' to sign-in with the test account.
 *
 * OpenAPI spec version: 4.5.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.blockchain.shipmentstrato.model.strato;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.File;

/**
 * Transaction Result
 */
@Schema(description = "Transaction Result")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-01-07T11:36:15.752447+08:00[Asia/Shanghai]")public class TransactionResult {

  @JsonProperty("blockHash")

  private String blockHash = null;

  @JsonProperty("transactionHash")

  private String transactionHash = null;

  @JsonProperty("message")

  private String message = null;

  @JsonProperty("response")

  private String response = null;

  @JsonProperty("trace")

  private String trace = null;

  @JsonProperty("gasUsed")

  private File gasUsed = null;

  @JsonProperty("etherUsed")

  private File etherUsed = null;

  @JsonProperty("contractsCreated")

  private String contractsCreated = null;

  @JsonProperty("contractsDeleted")

  private String contractsDeleted = null;

  @JsonProperty("stateDiff")

  private String stateDiff = null;

  @JsonProperty("time")

  private Double time = null;

  @JsonProperty("newStorage")

  private String newStorage = null;

  @JsonProperty("deletedStorage")

  private String deletedStorage = null;

  @JsonProperty("chainId")

  private String chainId = null;
  public TransactionResult blockHash(String blockHash) {
    this.blockHash = blockHash;
    return this;
  }

  

  /**
  * Get blockHash
  * @return blockHash
  **/
  @Schema(required = true, description = "")
  public String getBlockHash() {
    return blockHash;
  }
  public void setBlockHash(String blockHash) {
    this.blockHash = blockHash;
  }
  public TransactionResult transactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
    return this;
  }

  

  /**
  * Get transactionHash
  * @return transactionHash
  **/
  @Schema(required = true, description = "")
  public String getTransactionHash() {
    return transactionHash;
  }
  public void setTransactionHash(String transactionHash) {
    this.transactionHash = transactionHash;
  }
  public TransactionResult message(String message) {
    this.message = message;
    return this;
  }

  

  /**
  * Get message
  * @return message
  **/
  @Schema(required = true, description = "")
  public String getMessage() {
    return message;
  }
  public void setMessage(String message) {
    this.message = message;
  }
  public TransactionResult response(String response) {
    this.response = response;
    return this;
  }

  

  /**
  * Get response
  * @return response
  **/
  @Schema(required = true, description = "")
  public String getResponse() {
    return response;
  }
  public void setResponse(String response) {
    this.response = response;
  }
  public TransactionResult trace(String trace) {
    this.trace = trace;
    return this;
  }

  

  /**
  * Get trace
  * @return trace
  **/
  @Schema(required = true, description = "")
  public String getTrace() {
    return trace;
  }
  public void setTrace(String trace) {
    this.trace = trace;
  }
  public TransactionResult gasUsed(File gasUsed) {
    this.gasUsed = gasUsed;
    return this;
  }

  

  /**
  * Get gasUsed
  * @return gasUsed
  **/
  @Schema(required = true, description = "")
  public File getGasUsed() {
    return gasUsed;
  }
  public void setGasUsed(File gasUsed) {
    this.gasUsed = gasUsed;
  }
  public TransactionResult etherUsed(File etherUsed) {
    this.etherUsed = etherUsed;
    return this;
  }

  

  /**
  * Get etherUsed
  * @return etherUsed
  **/
  @Schema(required = true, description = "")
  public File getEtherUsed() {
    return etherUsed;
  }
  public void setEtherUsed(File etherUsed) {
    this.etherUsed = etherUsed;
  }
  public TransactionResult contractsCreated(String contractsCreated) {
    this.contractsCreated = contractsCreated;
    return this;
  }

  

  /**
  * Get contractsCreated
  * @return contractsCreated
  **/
  @Schema(required = true, description = "")
  public String getContractsCreated() {
    return contractsCreated;
  }
  public void setContractsCreated(String contractsCreated) {
    this.contractsCreated = contractsCreated;
  }
  public TransactionResult contractsDeleted(String contractsDeleted) {
    this.contractsDeleted = contractsDeleted;
    return this;
  }

  

  /**
  * Get contractsDeleted
  * @return contractsDeleted
  **/
  @Schema(required = true, description = "")
  public String getContractsDeleted() {
    return contractsDeleted;
  }
  public void setContractsDeleted(String contractsDeleted) {
    this.contractsDeleted = contractsDeleted;
  }
  public TransactionResult stateDiff(String stateDiff) {
    this.stateDiff = stateDiff;
    return this;
  }

  

  /**
  * Get stateDiff
  * @return stateDiff
  **/
  @Schema(required = true, description = "")
  public String getStateDiff() {
    return stateDiff;
  }
  public void setStateDiff(String stateDiff) {
    this.stateDiff = stateDiff;
  }
  public TransactionResult time(Double time) {
    this.time = time;
    return this;
  }

  

  /**
  * Get time
  * @return time
  **/
  @Schema(required = true, description = "")
  public Double getTime() {
    return time;
  }
  public void setTime(Double time) {
    this.time = time;
  }
  public TransactionResult newStorage(String newStorage) {
    this.newStorage = newStorage;
    return this;
  }

  

  /**
  * Get newStorage
  * @return newStorage
  **/
  @Schema(required = true, description = "")
  public String getNewStorage() {
    return newStorage;
  }
  public void setNewStorage(String newStorage) {
    this.newStorage = newStorage;
  }
  public TransactionResult deletedStorage(String deletedStorage) {
    this.deletedStorage = deletedStorage;
    return this;
  }

  

  /**
  * Get deletedStorage
  * @return deletedStorage
  **/
  @Schema(required = true, description = "")
  public String getDeletedStorage() {
    return deletedStorage;
  }
  public void setDeletedStorage(String deletedStorage) {
    this.deletedStorage = deletedStorage;
  }
  public TransactionResult chainId(String chainId) {
    this.chainId = chainId;
    return this;
  }

  

  /**
  * Get chainId
  * @return chainId
  **/
  @Schema(description = "")
  public String getChainId() {
    return chainId;
  }
  public void setChainId(String chainId) {
    this.chainId = chainId;
  }
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionResult transactionResult = (TransactionResult) o;
    return Objects.equals(this.blockHash, transactionResult.blockHash) &&
        Objects.equals(this.transactionHash, transactionResult.transactionHash) &&
        Objects.equals(this.message, transactionResult.message) &&
        Objects.equals(this.response, transactionResult.response) &&
        Objects.equals(this.trace, transactionResult.trace) &&
        Objects.equals(this.gasUsed, transactionResult.gasUsed) &&
        Objects.equals(this.etherUsed, transactionResult.etherUsed) &&
        Objects.equals(this.contractsCreated, transactionResult.contractsCreated) &&
        Objects.equals(this.contractsDeleted, transactionResult.contractsDeleted) &&
        Objects.equals(this.stateDiff, transactionResult.stateDiff) &&
        Objects.equals(this.time, transactionResult.time) &&
        Objects.equals(this.newStorage, transactionResult.newStorage) &&
        Objects.equals(this.deletedStorage, transactionResult.deletedStorage) &&
        Objects.equals(this.chainId, transactionResult.chainId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockHash, transactionHash, message, response, trace, gasUsed, etherUsed, contractsCreated, contractsDeleted, stateDiff, time, newStorage, deletedStorage, chainId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionResult {\n");
    
    sb.append("    blockHash: ").append(toIndentedString(blockHash)).append("\n");
    sb.append("    transactionHash: ").append(toIndentedString(transactionHash)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    trace: ").append(toIndentedString(trace)).append("\n");
    sb.append("    gasUsed: ").append(toIndentedString(gasUsed)).append("\n");
    sb.append("    etherUsed: ").append(toIndentedString(etherUsed)).append("\n");
    sb.append("    contractsCreated: ").append(toIndentedString(contractsCreated)).append("\n");
    sb.append("    contractsDeleted: ").append(toIndentedString(contractsDeleted)).append("\n");
    sb.append("    stateDiff: ").append(toIndentedString(stateDiff)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    newStorage: ").append(toIndentedString(newStorage)).append("\n");
    sb.append("    deletedStorage: ").append(toIndentedString(deletedStorage)).append("\n");
    sb.append("    chainId: ").append(toIndentedString(chainId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
